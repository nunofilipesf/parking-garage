{"version":3,"sources":["components/DailyEarningsPanel/index.jsx","components/FloorOccupationPanel/index.jsx","components/Loader/index.jsx","components/OccupationTotalsPanel/index.jsx","services/garage.helpers.js","services/sample-data.js","services/garage.js","App.jsx","index.jsx"],"names":["numberOfSessions","totalAmount","className","description","capacity","occupiedSpots","availableSpots","capacityPercentage","toFixed","style","height","role","width","getColorBasedOnCurrentCapacity","currentCapacity","calculateFloorOccupation","floorData","totalCapacity","spots","length","numberOfAvailableSpots","filter","spot","isFree","calculateEarnings","sessions","fees","i","session","endDate","calculateSessionValue","amount","remainingHoursToEvaluate","Math","abs","startDate","fee","numberOfHours","min","ParkingSpotType","generateRandomChanges","data","floor","random","floors","push","id","generateId","toString","licensePlace","Date","openSession","find","getTime","sessionDuration","setHours","getHours","getFloor","numberOfSpots","type","feeModel","priority","getInitialData","getGarageOccupation","floorsOccupationData","map","Promise","resolve","garage","reduce","calculateTotalOccupationReducer","earnings","totals","floorStatistics","VisualizationModes","App","useState","isLoading","setIsLoading","setData","visualizationMode","setVisualizationMode","onDataUpdate","newDataValue","getToggleButtonToVisualizationMode","buttonVisualizationMode","onClick","useEffect","then","callback","setInterval","a","Loader","OccupationSection","garageData","floorsData","EarningsSection","earningData","position","bottom","left","href","OccupationTotalsPanel","index","FloorOccupationPanel","key","DailyEarningsPanel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f76aabd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function ({ numberOfSessions, totalAmount }) {\r\n\r\n    return <div className=\"daily-earnings-panel card-group\">\r\n        <div className=\"card bg-dark text-white\">\r\n            <div className=\"card-header h5 text-center\">Today's Parking Sessions</div>\r\n            <div className=\"card-body\">\r\n                <p className=\"display-2 text-center\">{numberOfSessions}</p>\r\n            </div>\r\n        </div>\r\n        <div className=\"card bg-dark text-white\">\r\n            <div className=\"card-header h5 text-center\">Today's Total Earnings</div>\r\n            <div className=\"card-body\">\r\n                <p className=\"display-2 text-center\">NOK {totalAmount}</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React from 'react';\r\n\r\nexport default function ({ description, capacity, occupiedSpots }) {\r\n    const availableSpots = capacity - occupiedSpots;\r\n    const capacityPercentage = availableSpots / capacity * 100;\r\n\r\n    return <div className=\"floor-occupation-panel mt-3 mb-3\">\r\n        <h5>\r\n            {description}\r\n            <span className=\"float-right font-weight-normal\">Total spots: {capacity} | Current available capacity: {capacityPercentage.toFixed(1)}%</span>\r\n        </h5>\r\n        <div className=\"progress\" style={{ height: '2rem' }}>\r\n            <div className=\"progress-bar bg-dark\" role=\"progressbar\" style={{ width: `${100 - capacityPercentage}%` }}>{occupiedSpots} occupied</div>\r\n            <div className=\"progress-bar bg-info\" role=\"progressbar\" style={{ width: `${capacityPercentage}%` }}>{availableSpots} available</div>\r\n        </div>\r\n    </div>;\r\n}","import React from 'react';\r\nimport './style.css';\r\n\r\nexport default function () {\r\n    return <div className=\"loader\"></div>;\r\n}","import React from 'react';\r\n\r\nexport default function ({ capacity, occupiedSpots }) {\r\n    const availableSpots = capacity - occupiedSpots;\r\n    const capacityPercentage = (availableSpots / capacity * 100).toFixed(1);\r\n\r\n    return <div className=\"occupation-totals-panel card-group\">\r\n        <div className=\"card bg-dark text-white\">\r\n            <div className=\"card-header h5 text-center\">Occupied spots</div>\r\n            <div className=\"card-body\">\r\n                <p className=\"display-2 text-center\">{occupiedSpots}</p>\r\n            </div>\r\n        </div>\r\n        <div className=\"card bg-dark text-white\">\r\n            <div className=\"card-header h5 text-center\">Current capacity</div>\r\n            <div className=\"card-body\">\r\n                <p className={`display-3 mb-0 text-center text-${getColorBasedOnCurrentCapacity(capacityPercentage)}`}>{capacityPercentage}%</p>\r\n                <p className=\"text-center mb-0\">of {capacity} parking spots</p>\r\n            </div>\r\n        </div>\r\n        <div className=\"card bg-dark text-white\">\r\n            <div className=\"card-header h5 text-center\">Available spots</div>\r\n            <div className=\"card-body\">\r\n                <p className=\"display-2 text-center\">{availableSpots}</p>\r\n            </div>\r\n        </div>\r\n    </div>;\r\n}\r\n\r\nfunction getColorBasedOnCurrentCapacity(currentCapacity) {\r\n    if (currentCapacity < 25)\r\n        return 'danger';\r\n\r\n    if (currentCapacity < 50)\r\n        return 'warning';\r\n\r\n    return 'success';\r\n}","export function calculateFloorOccupation(floorData) {\r\n    const totalCapacity = floorData.spots.length;\r\n    const numberOfAvailableSpots = floorData.spots.filter(spot => spot.isFree).length;\r\n\r\n    return {\r\n        description: floorData.description,\r\n        capacity: totalCapacity,\r\n        availableSpots: numberOfAvailableSpots,\r\n        occupiedSpots: totalCapacity - numberOfAvailableSpots\r\n    };\r\n}\r\n\r\nexport function calculateEarnings(sessions, fees) {\r\n    let totalAmount = 0;\r\n    let numberOfSessions = 0;\r\n\r\n    for (let i = 0; i < sessions.length; i++) {\r\n        const session = sessions[i];\r\n\r\n        if (session.endDate == null)\r\n            continue;\r\n\r\n        numberOfSessions++;\r\n        totalAmount += calculateSessionValue(session, fees);\r\n    }\r\n\r\n    return { numberOfSessions, totalAmount };\r\n}\r\n\r\nfunction calculateSessionValue(session, fees) {\r\n    let amount = 0;\r\n    const sessionDurationInHours = Math.abs(session.endDate - session.startDate) / 36e5; // 36e5 == 3600000 == 60 (minutes) * 60 (seconds) * 1000 (miliseconds)\r\n    let remainingHoursToEvaluate = sessionDurationInHours;\r\n\r\n    for (const fee of fees) {\r\n        if (remainingHoursToEvaluate <= 0)\r\n            break;\r\n\r\n        if (fee.numberOfHours == null) {\r\n            // It is assumed that can exist a fee with numberOfHours == null \r\n            // That fee will be used to calculate the amount when no more fees with numberOfHours exist (meaning, the remaining hours)\r\n            amount += remainingHoursToEvaluate * fee.amount;\r\n            break;\r\n        }\r\n\r\n        amount += Math.min(fee.numberOfHours, remainingHoursToEvaluate) * fee.amount;\r\n        remainingHoursToEvaluate -= fee.numberOfHours;\r\n    }\r\n\r\n    return amount;\r\n}","const ParkingSpotType = {\r\n    Compact: 'Compact',\r\n    Large: 'Large',\r\n    Handicapped: 'Handicapped',\r\n    Motorcycle: 'Motorcycle',\r\n};\r\n\r\nexport function getInitialData() {\r\n    const data = {\r\n        floors: [\r\n            getFloor('1st Floor', 100),\r\n            getFloor('2nd Floor', 80),\r\n            getFloor('3rd Floor', 80),\r\n            getFloor('4th Floor', 50)\r\n        ],\r\n        sessions: [],\r\n        feeModel: [\r\n            { priority: 1, amount: 50, numberOfHours: 1 },\r\n            { priority: 2, amount: 30, numberOfHours: 2 },\r\n            { priority: 3, amount: 10, numberOfHours: null }\r\n        ]\r\n    };\r\n\r\n    for (let i = 0; i < 200; i++)\r\n        generateRandomChanges(data);\r\n\r\n    return data;\r\n};\r\n\r\nexport function generateRandomChanges(data) {\r\n    const floor = Math.floor(Math.random() * data.floors.length);\r\n    const spot = Math.floor(Math.random() * data.floors[floor].spots.length);\r\n\r\n    const isSpotFree = data.floors[floor].spots[spot].isFree;\r\n\r\n    if (isSpotFree) { // Generate a new session and occupy the spot\r\n        data.floors[floor].spots[spot].isFree = false;\r\n\r\n        data.sessions.push({\r\n            id: generateId().toString(),\r\n            licensePlace: 'AA-ABCDE-123',\r\n            startDate: new Date(),\r\n            endDate: null\r\n        });\r\n    } else { // Find a open session and close it\r\n        data.floors[floor].spots[spot].isFree = true;\r\n\r\n        const openSession = data.sessions.find(session => session.endDate == null);\r\n        if (openSession) {\r\n            openSession.endDate = new Date(openSession.startDate.getTime());\r\n\r\n            const sessionDuration = Math.floor(Math.random() * 8) + 1; // Generate random duration for the parking session (between 1 and 8)\r\n\r\n            openSession.endDate.setHours(openSession.endDate.getHours() + sessionDuration);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getFloor(description, numberOfSpots) {\r\n    const floor = { id: generateId(), description, spots: [] };\r\n\r\n    for (let i = 0; i < numberOfSpots; i++)\r\n        floor.spots.push({ id: generateId(), type: ParkingSpotType.Compact, isFree: true });\r\n\r\n    return floor;\r\n}\r\n\r\nfunction generateId() { return new Date().getTime(); }","import { calculateFloorOccupation, calculateEarnings } from './garage.helpers';\r\nimport { getInitialData, generateRandomChanges } from './sample-data';\r\n\r\nconst data = getInitialData();\r\n\r\nexport function subscribeDataUpdates(callback) {\r\n    setInterval(async() => {\r\n        generateRandomChanges(data);\r\n        callback(await getGarageOccupation());\r\n    }, 1000);\r\n}\r\n\r\nexport function getGarageOccupation() {\r\n    const floorsOccupationData = data.floors.map(calculateFloorOccupation);\r\n\r\n    return Promise.resolve({\r\n        garage: floorsOccupationData.reduce(calculateTotalOccupationReducer, { capacity: 0, availableSpots: 0, occupiedSpots: 0 }),\r\n        floors: floorsOccupationData,\r\n        earnings: calculateEarnings(data.sessions, data.feeModel)\r\n    });\r\n}\r\n\r\nfunction calculateTotalOccupationReducer(totals, floorStatistics) {\r\n    return {\r\n        capacity: totals.capacity + floorStatistics.capacity,\r\n        availableSpots: totals.availableSpots + floorStatistics.availableSpots,\r\n        occupiedSpots: totals.occupiedSpots + floorStatistics.occupiedSpots\r\n    };\r\n}","import React, { useState, useEffect } from 'react';\n\nimport DailyEarningsPanel from './components/DailyEarningsPanel';\nimport FloorOccupationPanel from './components/FloorOccupationPanel';\nimport Loader from './components/Loader';\nimport OccupationTotalsPanel from './components/OccupationTotalsPanel';\n\nimport { getGarageOccupation, subscribeDataUpdates } from './services/garage';\n\nconst VisualizationModes = { Earnings: 'Earnings', Occupation: 'Occupation' };\n\nexport default function App() {\n\n    const [isLoading, setIsLoading] = useState(true);\n    const [data, setData] = useState(null);\n    const [visualizationMode, setVisualizationMode] = useState(VisualizationModes.Occupation)\n\n    useEffect(() => {\n        getGarageOccupation()\n            .then(data => {\n                setData(data);\n                setIsLoading(false);\n\n                subscribeDataUpdates(onDataUpdate);\n            });\n    }, []);\n\n    function onDataUpdate(newDataValue) {\n        setData(newDataValue);\n    }\n\n    function getToggleButtonToVisualizationMode(buttonVisualizationMode) {\n        return <button\n            type=\"button\"\n            className={`btn btn-${visualizationMode === buttonVisualizationMode ? 'dark' : 'secondary'}`}\n            onClick={() => setVisualizationMode(buttonVisualizationMode)}>\n            {buttonVisualizationMode}\n        </button>;\n    }\n\n    if (isLoading) {\n        return <div className=\"app container\">\n            <Loader />\n        </div>;\n    }\n\n    return (\n        <div className=\"app container\">\n\n            <div className=\"btn-group mb-3 d-flex\">\n                {getToggleButtonToVisualizationMode(VisualizationModes.Occupation)}\n                {getToggleButtonToVisualizationMode(VisualizationModes.Earnings)}\n            </div>\n\n            {\n                visualizationMode === VisualizationModes.Occupation\n                    ? <OccupationSection garageData={data.garage} floorsData={data.floors} />\n                    : <EarningsSection earningData={data.earnings} />\n            }\n\n            <span style={{ position: 'fixed', bottom: '1rem', left: '1rem' }}>Photo by <a href=\"https://unsplash.com/@jordankgraff?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Jordan Graff</a> on <a href=\"https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span>\n        </div>\n    );\n}\n\nfunction OccupationSection({ garageData, floorsData }) {\n    return <>\n        <OccupationTotalsPanel capacity={garageData.capacity || 0} occupiedSpots={garageData.occupiedSpots || 0} />\n        {\n            floorsData.map(({ description, capacity, occupiedSpots }, index) => <FloorOccupationPanel key={index} description={description} capacity={capacity} occupiedSpots={occupiedSpots} />)\n        }\n    </>\n}\n\nfunction EarningsSection({ earningData }) {\n    return <DailyEarningsPanel numberOfSessions={earningData.numberOfSessions} totalAmount={earningData.totalAmount} />;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}